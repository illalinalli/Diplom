@using HomelessAnimalsDiplom.Views.Home;
@using HomelessAnimalsDiplom.Views.Recommendations;
@using Newtonsoft.Json;
@using HomelessAnimalsDiplom.Models;
@using static HomelessAnimalsDiplom.Models.Database;
@using MongoDB.Bson;
@using MongoDB.Driver;
@using static HomelessAnimalsDiplom.Views.Advertisement.AdvertisementSettings;
@using static HomelessAnimalsDiplom.Controllers.HomeController;
@using static HomelessAnimalsDiplom.Views.Home.MainPageSettings;

@code {

    bool Shown;
    public Action? OnYes;
    public Action? OnClose;
    Item selectedItem;
    List<PropertyValue>? properties;
    bool popupShown;
    bool isFavorite;
    FavoritesComponent favorites = new();
    bool ShowComponent;

    [Parameter]
    public MainPageSettings MainPage { get; set; }

    [Parameter]
    public RecommendationsComponent RecommendationsComp { get; set; }

    [Parameter]
    public FavoritesComponent FavoritesComp { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        //string currentUrl = NavigationManager.Uri;
        //var last = currentUrl.Split("/").LastOrDefault();
        //ShowComponent = last == "FavoritesPage" ? true : false;
    }

    public void ShowDialog(Item item, Action onYes, Action onClose)
    {
        OnYes = onYes;
        Shown = true;
        selectedItem = item;
        if (CurUser != null)
        {
            if (CurUser.Favorites == null)
            {
                CurUser.Favorites = new();
            }
            isFavorite = CurUser.Favorites.Any(x => x == selectedItem.Id);
        }
       
        StateHasChanged();
    }

    public void AddToViewingHistory(ObjectId itemId)
    {
        if (CurUser == null) return;
        if (CurUser.ViewingHistory == null)
        {
            CurUser.ViewingHistory = new List<HistoryItem>();
        }
        if (selectedItem.UserRef != CurUser.Id)
        {
            CurUser.ViewingHistory.Add(new HistoryItem
            {
                ItemId = itemId,
                ViewedAt = DateTimeOffset.UtcNow
            });
        }
    }

    void Close()
    {
        OnClose?.Invoke();
        Shown = false;

        if (CurUser != null)
        {
            // обновляем user
            var filter = Builders<User>.Filter.Eq("_id", CurUser.Id);
            AddToViewingHistory(selectedItem.Id);
            // выполнение операции upsert
            UserCollection?.ReplaceOneAsync(filter, CurUser, ReplaceOptionsUpsert);
            
            //if (MainPage != null) {
            //    MainPage.Update();
            //}

            if (FavoritesComp != null)
            {
                FavoritesComp.Update();
            }

            if (RecommendationsComp != null)
            {
                RecommendationsComp.Update();
            }
            
        }
    }
   
    void Call()
    {
        popupShown = true;
        StateHasChanged();
    }

    void ClickOnFav()
    {
        if (CurUser == null) return;
        isFavorite = !isFavorite;

        if (isFavorite)
        {
            CurUser.Favorites?.Add(selectedItem.Id);
        }
        else
        {
            CurUser.Favorites?.Remove(selectedItem.Id);
        }

    }
    void HoldPopup()
    {
        popupShown = false;
        StateHasChanged();
    }

}

@if (Shown)
{
    <div class="modal" tabindex="-1" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="color: gray;">Подробности о животном</h3>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    @if (selectedItem != null)
                    {
                        <h1 class="mb-4">@selectedItem.Title</h1>
                        
                            @if (isFavorite)
                            {
                                <button type="button" class="btn btn-secondary-outline btn-lg mb-4" style="background-color: lightgray; color: black; font-weight: 400;" @onclick="ClickOnFav">
                                    <i class="bi bi-heart-fill"></i> В избранном
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-secondary-outline btn-lg mb-4" style="background-color: lightgray; color: black; font-weight: 400;" @onclick="ClickOnFav">
                                    <i class="bi bi-heart"></i> Добавить в избранное
                                </button>
                            }
                        
                        <div id="animalCarousel" class="my-carousel mb-4">

                            <div class="carousel">
                                @foreach (var img in selectedItem.Images)
                                {
                                    <div class="slide">
                                        <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(img)}")" alt="Image @(selectedItem.Images.IndexOf(img)+1)">
                                    </div>
                                }
                            </div>
                        </div>

                        <h2>О животном</h2>
                        <h4 class="decription-item">Порода: @selectedItem.GetBreed().Name</h4>
                        <h4 class="decription-item">Размер породы: @selectedItem.GetBreedSize().Name</h4>
                        <h4 class="decription-item">Пол животного: @selectedItem.Sex.Name</h4>
                        <h4 class="decription-item">
                            Окрас животного:
                            @foreach(var c in selectedItem.Colors) {
                                var cTxt = c.Name + " ";
                                @cTxt
                            }
                        </h4>
                        @if (properties != null)
                        {
                            <h4 class="decription-item">Пол: @properties.FirstOrDefault(x => x.PropTypeRef == new ObjectId("658ab0418a4dcfd166a80344")).Name</h4>
                          
                        }
                        <h2>Описание</h2>
                        <h4 class="decription-item">@selectedItem.LongDescription</h4>

                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary-outline" style="font-size: small; flex: 1; background-color: forestgreen; color: white;" @onclick="Call">Позвонить</button>
                    <button type="button" class="btn btn-secondary-outline " style="font-size: small; flex: 1; background-color: lightgray; color: black; font-weight: 400;" @onclick="Close">Закрыть</button>
                </div>
            </div>
        </div>
    </div>

}


    
