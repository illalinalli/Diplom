@using static Controllers.HomeController;
@using HomelessAnimalsDiplom.Models;
@using static HomelessAnimalsDiplom.Models.Database;
@using HomelessAnimalsDiplom.Views.Advertisement;
@using MongoDB.Bson;
@using MongoDB.Driver;
@using static Controllers.HomeController;
@code {
    Similarity similarity = new Similarity();  // Создание экземпляра матрицы

    protected override void OnInitialized()
    {
        // Загрузка и заполнение матрицы из базы данных (если необходимо)
        // Пример:
        similarity.SizeSimilarity = LoadMatrixFromDatabase();
    }

    private void Save()
    {
        similarity.SizesSimilarityUpdate(); // Вызов метода для сохранения данных в базе данных
                                                  // Дополнительные действия при сохранении
    }

    private Dictionary<Breed, Dictionary<Breed, double>> LoadMatrixFromDatabase()
    {
        // Логика загрузки данных из базы данных (может быть реализована с использованием Entity Framework или другого ORM)
        // Пример заполнения матрицы нулями:
        Dictionary<Breed, Dictionary<Breed, double>> matrix = new Dictionary<Breed, Dictionary<Breed, double>>();
        List<Breed> breeds = Item.GetAllBreeds(); // Функция для получения списка пород из базы данных

        foreach (var breed1 in breeds)
        {
            matrix[breed1] = new Dictionary<Breed, double>();
            foreach (var breed2 in breeds)
            {
                matrix[breed1][breed2] = 0.0; // Заполнение матрицы нулями
            }
        }

        return matrix;
    }
    private void OnInput(ChangeEventArgs e, Breed breed1, Breed breed2)
    {
        if (e.Value != null)
        {
            double value = Convert.ToDouble(e.Value);
            if (value > 1)
            {
                value = 1;
            }
            similarity.SizeSimilarity[breed1][breed2] = value;
        }
    }
    private void UpdateValue(Breed breed1, Breed breed2, double value)
    {
        if (value >= 0 && value <= 1)
        {
            similarity.SizeSimilarity[breed1][breed2] = value;
        }
        //}
        //else
        //{
        //    similarity.SizeSimilarity[outerKey][innerKey] = 0; // Можно задать другое значение по умолчанию
        //}
    }
}
<div class="container-fluid">
    <h5>Матрица схожести пород</h5>
    <table class="table table-bordered">
        <tr>
            <th></th>
            @foreach (var h in similarity.SizeSimilarity)
            {
                <th style="text-align:center; font-weight: 400;">@h.Key.Name</th>
            }
        </tr>
        @foreach (var kvp in similarity.SizeSimilarity)
        {
            <tr>
                <td>@kvp.Key</td>
                @foreach (var innerKvp in kvp.Value)
                {
                    <td class="border">
                        <input type="number" @oninput="@((e)=>UpdateValue(kvp.Key, innerKvp.Key , innerKvp.Value))" value="@innerKvp.Value" 
                        step="0.1" min="0" max="1" class="form-control" />
                    </td>
                }
            </tr>
        }
    </table>
    <button class="btn btn-primary" @onclick="Save">Сохранить</button>
</div>