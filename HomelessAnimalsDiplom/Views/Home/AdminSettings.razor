@using static HomelessAnimalsDiplom.Controllers.HomeController;
@using static HomelessAnimalsDiplom.Models.Database;
@using HomelessAnimalsDiplom.Models;
@using HomelessAnimalsDiplom.Views.Advertisement;
@using MongoDB.Bson;
@using MongoDB.Driver;
@code {
    //public Similarity similarity;  // Создание экземпляра матрицы
    AnimalType selectedAnimalType;
    private KeyValuePair<Breed, double> innerKvp;
    public List<BreedSimilarity> breedsSimilarity = new();
    List<AnimalType> AnimalTypes = new();
    string newBreedName = String.Empty;
    PropertyValue selectedSize;
    Breed newBreed = new();
    List<Breed> breeds = new();

    PropertyValue newColor = new();
    List<ColorSimilarity> colorsSimilarity = new();
    List<SizeSimilarity> sizesSimilarity = new();
    protected override void OnInitialized()
    {
        var allBreeds = Item.GetAllBreeds();
        breedsSimilarity = BreedSimilarity.Fill();
        colorsSimilarity = ColorSimilarity.FillColorMatrix();
        sizesSimilarity = SizeSimilarity.FillSizeMatrix();
        selectedAnimalType = new();
        selectedSize = new();
        AnimalTypes = AnimalType.GetAnimalTypes();

    }

    public void Save()
    {
        try
        {
            foreach (var b in breedsSimilarity)
            {
                var filter = Builders<BreedSimilarity>.Filter.Eq("_id", b.Id);
                BreedSimilarityCollection?.ReplaceOneAsync(filter, b, ReplaceOptionsUpsert).Wait();

            }
            foreach (var c in colorsSimilarity)
            {
                var filterColor = Builders<ColorSimilarity>.Filter.Eq("_id", c.Id);
                ColorSimilarityCollection?.ReplaceOneAsync(filterColor, c, ReplaceOptionsUpsert).Wait();

            }
            foreach (var s in sizesSimilarity)
            {
                var filterColor = Builders<SizeSimilarity>.Filter.Eq("_id", s.Id);
                SizeSimilarityCollection?.ReplaceOneAsync(filterColor, s, ReplaceOptionsUpsert).Wait();

            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task UpdateBreedMatrixValue(Breed breed1, Breed breed2, ChangeEventArgs e)
    {
        if (e.Value == null) return;
        double value = 0.0;
        var curRes = breedsSimilarity.FirstOrDefault(x => x.AnimalBreed == breed1);
        if (curRes == null) return;
        if (Double.TryParse(e.Value.ToString().Replace(".", ","), out value))
        {
            if (value >= 0 && value <= 1)
            {
                await Task.Delay(1); // Заглушка для асинхронности
                curRes.SimilarityValues[breed2] = value;
            }
            else
            {
                curRes.SimilarityValues[breed2] = 0;
            }
        }

    }

    private async Task UpdateColorMatrixValue(PropertyValue val1, PropertyValue val2, ChangeEventArgs e)
    {
        if (e.Value == null) return;
        double value = 0.0;
        var curRes = colorsSimilarity.FirstOrDefault(x => x.Color == val1);
        SizeSimilarity sizeRes = new();
        if (curRes == null)
        {
            sizeRes = sizesSimilarity.FirstOrDefault(x => x.Size == val1);
            if (sizeRes == null) return;
        }
        if (Double.TryParse(e.Value.ToString().Replace(".", ","), out value))
        {
            if (value >= 0 && value <= 1)
            {
                await Task.Delay(1); // Заглушка для асинхронности
                if (curRes == null)
                {
                    sizeRes.SimilarityValues[val2] = value;
                }
                else
                {
                    curRes.SimilarityValues[val2] = value;
                    
                }
            }
            else
            {
                if (curRes == null)
                {
                    sizeRes.SimilarityValues[val2] = 0;
                }
                else
                {
                    curRes.SimilarityValues[val2] = 0;

                }
            }
        }

    }

    private async Task AddBreed()
    {
        newBreed.AnimalTypeRef = selectedAnimalType.Id;
        await Task.Delay(1);
        Breed.SaveNewBreed(newBreed);

        newBreed = new();
        selectedAnimalType = new();
        breeds.Clear();
        breedsSimilarity = BreedSimilarity.Fill();
        StateHasChanged();
    }
    private async Task AddColor()
    {
        var propType = PropertyTypeCollection.Find(c => c.Name == "Окрас животного").FirstOrDefault();
        if (propType == null) return;
        newColor.PropTypeRef = propType.Id;
        await Task.Delay(1);
        PropertyValue.SaveNewColor(newColor);
        newColor = new();
        colorsSimilarity = ColorSimilarity.FillColorMatrix();
        StateHasChanged();
    }

    void TypeClicked(ChangeEventArgs args)
    {
        if (args.Value == null) return;

        selectedAnimalType.Id = ObjectId.Parse(args.Value.ToString());

        if (selectedAnimalType.Id != ObjectId.Empty)
        {
            breeds = Breed.GetAllBreeds().Where(x => x.AnimalTypeRef == selectedAnimalType.Id).ToList();
        }
        StateHasChanged();
    }
   
    void SizeClicked(ChangeEventArgs args)
    {
        if (args.Value == null) return;

        selectedSize.Id = ObjectId.Parse(args.Value.ToString());
        newBreed.SizeRef = selectedSize.Id;

        StateHasChanged();
    }
}
<div class="container-fluid">
   <h4>Добавление новой породы животного</h4>

    <div>
        <label>Название породы:</label>
        <input class="form-control mb-2" @bind="newBreed.Name" />
    </div>

    <div>
        <label>Выберите тип животного:</label>
        <select class="form-control mb-2" value="@selectedAnimalType.IdAsString" @onchange="TypeClicked">
            @foreach (var at in AnimalType.GetAnimalTypes())
            {
                <option value="@at.IdAsString">@at.Name</option>
            }
        </select>
    </div>
    <div>
        <label>Выберите размер животного:</label>
        <select class="form-control mb-3" value="@selectedSize.Id" @onchange="SizeClicked">
            @foreach (var size in PropertyValue.GetAllSizes())
            {
                <option value="@size.IdAsString">@size.Name</option>
            }
        </select>
    </div>
    <button class="btn btn-primary mb-3 me-3" @onclick="AddBreed">Сохранить породу</button>

    @if (breeds.Count() > 0)
    {
        <div class="btn-group dropend mb-3 me-3">
            <button class="btn btn-secondary btn-sm dropdown-toggle" style="color: #fff; font-size: 14px;" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Существующие породы животных
            </button>
            <ul class="dropdown-menu">
                @foreach (var breed in breeds)
                {
                    <li style="text-align: center;">@breed.Name</li>
                }
            </ul>   
        </div>
    }

    <h4>Добавление нового окраса животного</h4>
    <div>
        <label>Название окраса:</label>
        <input class="form-control mb-3" @bind="newColor.Name" />
    </div>
    <button class="btn btn-primary mb-3" @onclick="AddColor">Сохранить окрас</button>

    <h4 class="pt-3">Матрица схожести окрасов</h4>
    <table class="table table-bordered mb-3">
        <tr>
            <th></th>
            @foreach (var c in colorsSimilarity)
            {
                <th style="text-align:center; font-weight: 400;">@c.Color.Name</th>

            }
        </tr>
        @foreach (var kvp in colorsSimilarity)
        {
            <tr>
                <td>@kvp.Color.Name</td>
                @foreach (var innerKvp in kvp.SimilarityValues)
                {
                    //
                    <td class="border">
                        <input type="text" value="@innerKvp.Value.ToString()" @onchange="@((e)=>UpdateColorMatrixValue(kvp.Color, innerKvp.Key, e))"
                       step="0.1" min="0" max="1" class="form-control" />
                    </td>
                }
            </tr>
        }
    </table>

    <h4 class="pt-3">Матрица схожести пород</h4>
    <table class="table table-bordered mb-2">
        <tr>
            <th></th>
            @foreach (var b in breedsSimilarity)
            {
                <th style="text-align:center; font-weight: 400;">@b.AnimalBreed.Name</th>
            }
        </tr>
        @foreach (var kvp in breedsSimilarity)
        {
            <tr>
                <td>@kvp.AnimalBreed.Name</td>
                @foreach (var innerKvp in kvp.SimilarityValues)
                {
                   <td class="border">
                        <input type="text" value="@innerKvp.Value.ToString()" @onchange="@((e)=>UpdateBreedMatrixValue(kvp.AnimalBreed, innerKvp.Key, e))"
                       step="0.1" min="0" max="1" class="form-control"/>
                   </td>
                }
            </tr>
        }
    </table>

    <h4 class="pt-3">Матрица схожести размеров</h4>
    <table class="table table-bordered mb-3">
        <tr>
            <th></th>
            @foreach (var c in sizesSimilarity)
            {
                <th style="text-align:center; font-weight: 400;">@c.Size.Name</th>

            }
        </tr>
        @foreach (var kvp in sizesSimilarity)
        {
            <tr>
                <td>@kvp.Size.Name</td>
                @foreach (var innerKvp in kvp.SimilarityValues)
                {
                    //
                    <td class="border">
                        <input type="text" value="@innerKvp.Value.ToString()" @onchange="@((e)=>UpdateColorMatrixValue(kvp.Size, innerKvp.Key, e))"
                       step="0.1" min="0" max="1" class="form-control" />
                    </td>
                }
            </tr>
        }
    </table>

    <button class="btn btn-primary mb-3 pt-3" @onclick="Save">Сохранить изменения</button>
</div>